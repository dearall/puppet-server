[main]
server = puppetserver.sansovo.org
strict_variables = true
# This file can be used to override the default puppet settings.
# See the following links for more details on what settings are available:
# - https://puppet.com/docs/puppet/latest/config_important_settings.html
# - https://puppet.com/docs/puppet/latest/config_about_settings.html
# - https://puppet.com/docs/puppet/latest/config_file_main.html
# - https://puppet.com/docs/puppet/latest/configuration.html
[server]
vardir = /opt/puppetlabs/server/data/puppetserver
logdir = /var/log/puppetlabs/puppetserver
rundir = /var/run/puppetlabs/puppetserver
pidfile = /var/run/puppetlabs/puppetserver/puppetserver.pid
codedir = /etc/puppetlabs/code
autosign = true
#######################################################################################



# The configuration file for agent.  Note that this file
# is likely to have unused settings in it; any setting that's
# valid anywhere in Puppet can be in any config file, even if it's not used.
# 
# Every section can specify three special parameters: owner, group, and mode.
# These parameters affect the required permissions of any files specified after
# their specification.  Puppet will sometimes use these parameters to check its
# own configured state, so they can be used to make Puppet a bit more self-managing.
# 
# The file format supports octothorpe-commented lines, but not partial-line comments.
# 
# Generated on 2021-09-06 13:06:19 +0000.
# 
[agent]
    # The main Puppet configuration directory.  The default for this setting
    # is calculated based on the user.  If the process is running as root or
    # the user that Puppet is supposed to run as, it defaults to a system
    # directory, but if it's running as any other user, it defaults to being
    # in the user's home directory.
    # The default value is '/etc/puppetlabs/puppet'.
    confdir = /etc/puppetlabs/puppet

    # The main Puppet code directory.  The default for this setting
    # is calculated based on the user.  If the process is running as root or
    # the user that Puppet is supposed to run as, it defaults to a system
    # directory, but if it's running as any other user, it defaults to being
    # in the user's home directory.
    # The default value is '/etc/puppetlabs/code'.
    codedir = /etc/puppetlabs/code

    # Where Puppet stores dynamic and growing data.  The default for this
    # setting is calculated specially, like `confdir`_.
    # The default value is '/opt/puppetlabs/puppet/cache'.
    vardir = /opt/puppetlabs/puppet/cache

    # The name of the application, if we are running as one.  The
    # default is essentially $0 without the path or `.rb`.
    # The default value is 'agent'.
    name = agent

    # The directory in which to store log files
    # The default value is '/var/log/puppetlabs/puppet'.
    logdir = /var/log/puppetlabs/puppet

    # Default logging level for messages from Puppet. Allowed values are:
    # 
    # * debug
    # * info
    # * notice
    # * warning
    # * err
    # * alert
    # * emerg
    # * crit
    # The default value is 'notice'.
    # log_level = notice

    # A comma-separated list of warning types to suppress. If large numbers
    # of warnings are making Puppet's logs too large or difficult to use, you
    # can temporarily silence them with this setting.
    # 
    # If you are preparing to upgrade Puppet to a new major version, you
    # should re-enable all warnings for a while.
    # 
    # Valid values for this setting are:
    # 
    # * `deprecations` --- disables deprecation warnings.
    # * `undefined_variables` --- disables warnings about non existing variables.
    # * `undefined_resources` --- disables warnings about non existing resources.
    # The default value is '[]'.
    # disable_warnings = []

    # Whether to merge class-level dependency failure warnings.
    # 
    # When a class has a failed dependency, every resource in the class
    # generates a notice level message about the dependency failure,
    # and a warning level message about skipping the resource.
    # 
    # If true, all messages caused by a class dependency failure are merged
    # into one message associated with the class.
    # merge_dependency_warnings = false

    # The strictness level of puppet. Allowed values are:
    # 
    # * off     - do not perform extra validation, do not report
    # * warning - perform extra validation, report as warning (default)
    # * error   - perform extra validation, fail with error
    # 
    # The strictness level is for both language semantics and runtime
    # evaluation validation. In addition to controlling the behavior with
    # this primary server switch some individual warnings may also be controlled
    # by the disable_warnings setting.
    # 
    # No new validations will be added to a micro (x.y.z) release,
    # but may be added in minor releases (x.y.0). In major releases
    # it expected that most (if not all) strictness validation become
    # standard behavior.
    # The default value is 'warning'.
    # strict = warning

    # If true, turns off all translations of Puppet and module
    # log messages, which affects error, warning, and info log messages,
    # as well as any translations in the report and CLI.
    # The default value is 'true'.
    # disable_i18n = true

    # The scheduling priority of the process.  Valid values are 'high',
    # 'normal', 'low', or 'idle', which are mapped to platform-specific
    # values.  The priority can also be specified as an integer value and
    # will be passed as is, e.g. -5.  Puppet must be running as a privileged
    # user in order to increase scheduling priority.
    # priority = 

    # Whether to print stack traces on some errors. Will print
    # internal Ruby stack trace interleaved with Puppet function frames.
    # trace = false

    # Whether to print the Puppet stack trace on some errors.
    # This is a noop if `trace` is also set.
    # puppet_trace = false

    # Whether to enable experimental performance profiling
    # profile = false

    # Whether or not to look for versioned environment directories,
    # symlinked from `$environmentpath/<environment>`. This is an experimental
    # feature and should be used with caution.
    # versioned_environment_dirs = false

    # Whether to compile a [static catalog](https://puppet.com/docs/puppet/latest/static_catalogs.html#enabling-or-disabling-static-catalogs),
    # which occurs only on Puppet Server when the `code-id-command` and
    # `code-content-command` settings are configured in its `puppetserver.conf` file.
    # The default value is 'true'.
    # static_catalogs = true

    # Whether to compile and apply the settings catalog
    # The default value is 'true'.
    # settings_catalog = true

    # Whether the agent specified environment should be considered authoritative,
    # causing the run to fail if the retrieved catalog does not match it.
    # strict_environment_mode = false

    # Whether log files should always flush to disk.
    # The default value is 'true'.
    # autoflush = true

    # What syslog facility to use when logging to syslog.
    # Syslog has a fixed list of valid facilities, and you must
    # choose one of those; you cannot just make one up.
    # The default value is 'daemon'.
    # syslogfacility = daemon

    # The directory where Puppet state is stored.  Generally,
    # this directory can be removed without causing harm (although it
    # might result in spurious service restarts).
    # The default value is '$vardir/state'.
    statedir = /opt/puppetlabs/puppet/cache/state

    # Where Puppet PID files are kept.
    # The default value is '/var/run/puppetlabs'.
    rundir = /var/run/puppetlabs

    # Whether to just print a manifest to stdout and exit.  Only makes
    # sense when specified on the command line as `--genmanifest`.  Takes into account arguments specified
    # on the CLI.
    # genmanifest = false

    # Prints the value of a specific configuration setting.  If the name of a
    # setting is provided for this, then the value is printed and puppet
    # exits.  Comma-separate multiple values.  For a list of all values,
    # specify 'all'. This setting is deprecated, the 'puppet config' command replaces this functionality.
    # The default value is ''.
    # configprint = 

    # Whether to use colors when logging to the console.  Valid values are
    # `ansi` (equivalent to `true`), `html`, and `false`, which produces no color.
    # The default value is 'ansi'.
    # color = ansi

    # Whether to create the necessary user and group that puppet agent will run as.
    # mkusers = false

    # Whether Puppet should manage the owner, group, and mode of files it uses internally.
    # **Note**: For Windows agents, the default is `false` for versions 4.10.13 and greater, versions 5.5.6 and greater, and versions 6.0 and greater.
    # The default value is 'true'.
    # manage_internal_file_permissions = true

    # Perform one configuration run and exit, rather than spawning a long-running
    # daemon. This is useful for interactively running puppet agent, or
    # running puppet agent from cron.
    # onetime = false

    # The shell search path.  Defaults to whatever is inherited
    # from the parent process.
    # 
    # This setting can only be set in the `[main]` section of puppet.conf; it cannot
    # be set in `[server]`, `[agent]`, or an environment config section.
    # The default value is 'none'.
    # path = none

    # An extra search path for Puppet.  This is only useful
    # for those files that Puppet will load on demand, and is only
    # guaranteed to work for those cases.  In fact, the autoload
    # mechanism is responsible for making sure this directory
    # is in Ruby's search path
    # The default value is '$vardir/lib'.
    libdir = /opt/puppetlabs/puppet/cache/lib

    # The environment in which Puppet is running. For clients,
    # such as `puppet agent`, this determines the environment itself, which
    # Puppet uses to find modules and much more. For servers, such as `puppet server`,
    # this provides the default environment for nodes that Puppet knows nothing about.
    # 
    # When defining an environment in the `[agent]` section, this refers to the
    # environment that the agent requests from the primary server. The environment doesn't
    # have to exist on the local filesystem because the agent fetches it from the
    # primary server. This definition is used when running `puppet agent`.
    # 
    # When defined in the `[user]` section, the environment refers to the path that
    # Puppet uses to search for code and modules related to its execution. This
    # requires the environment to exist locally on the filesystem where puppet is
    # being executed. Puppet subcommands, including `puppet module` and
    # `puppet apply`, use this definition.
    # 
    # Given that the context and effects vary depending on the
    # [config section](https://puppet.com/docs/puppet/latest/config_file_main.html#config-sections)
    # in which the `environment` setting is defined, do not set it globally.
    # The default value is 'production'.
    # environment = production

    # A search path for directory environments, as a list of directories
    # separated by the system path separator character. (The POSIX path separator
    # is ':', and the Windows path separator is ';'.)
    # 
    # This setting must have a value set to enable **directory environments.** The
    # recommended value is `$codedir/environments`. For more details, see
    # <https://puppet.com/docs/puppet/latest/environments_about.html>
    # The default value is '$codedir/environments'.
    environmentpath = /etc/puppetlabs/code/environments

    # Affects how we cache attempts to load Puppet resource types and features.  If
    # true, then calls to `Puppet.type.<type>?` `Puppet.feature.<feature>?`
    # will always attempt to load the type or feature (which can be an
    # expensive operation) unless it has already been loaded successfully.
    # This makes it possible for a single agent run to, e.g., install a
    # package that provides the underlying capabilities for a type or feature,
    # and then later load that type or feature during the same run (even if
    # the type or feature had been tested earlier and had not been available).
    # 
    # If this setting is set to false, then types and features will only be
    # checked once, and if they are not available, the negative result is
    # cached and returned for all subsequent attempts to load the type or
    # feature.  This behavior is almost always appropriate for the server,
    # and can result in a significant performance improvement for types and
    # features that are checked frequently.
    # The default value is 'true'.
    # always_retry_plugins = true

    # Which arguments to pass to the diff command when printing differences between
    # files. The command to use can be chosen with the `diff` setting.
    # The default value is '-u'.
    diff_args = -u

    # Which diff command to use when printing differences between files. This setting
    # has no default value on Windows, as standard `diff` is not available, but Puppet can use many
    # third-party diff tools.
    # The default value is 'diff'.
    # diff = diff

    # Whether to log and report a contextual diff when files are being replaced.
    # This causes partial file contents to pass through Puppet's normal
    # logging and reporting system, so this setting should be used with
    # caution if you are sending Puppet's reports to an insecure
    # destination. This feature currently requires the `diff/lcs` Ruby
    # library.
    # show_diff = false

    # Whether to send the process into the background.  This defaults
    # to true on POSIX systems, and to false on Windows (where Puppet
    # currently cannot daemonize).
    # The default value is 'true'.
    # daemonize = true

    # The maximum allowed UID.  Some platforms use negative UIDs
    # but then ship with tools that do not know how to handle signed ints,
    # so the UIDs show up as huge numbers that can then not be fed back into
    # the system.  This is a hackish way to fail in a slightly more useful
    # way when that happens.
    # The default value is '4294967290'.
    # maximum_uid = 4294967290

    # The YAML file containing indirector route configuration.
    # The default value is '$confdir/routes.yaml'.
    route_file = /etc/puppetlabs/puppet/routes.yaml

    # Which node data plugin to use when compiling node catalogs.
    # 
    # When Puppet compiles a catalog, it combines two primary sources of info: the main manifest,
    # and a node data plugin (often called a "node terminus," for historical reasons). Node data
    # plugins provide three things for a given node name:
    # 
    # 1. A list of classes to add to that node's catalog (and, optionally, values for their
    #    parameters).
    # 2. Which Puppet environment the node should use.
    # 3. A list of additional top-scope variables to set.
    # 
    # The three main node data plugins are:
    # 
    # * `plain` --- Returns no data, so that the main manifest controls all node configuration.
    # * `exec` --- Uses an
    #   [external node classifier (ENC)](https://puppet.com/docs/puppet/latest/nodes_external.html),
    #   configured by the `external_nodes` setting. This lets you pull a list of Puppet classes
    #   from any external system, using a small glue script to perform the request and format the
    #   result as YAML.
    # * `classifier` (formerly `console`) --- Specific to Puppet Enterprise. Uses the PE console
    #   for node data."
    # The default value is 'rest'.
    node_terminus = rest

    # How to store cached nodes.
    # Valid values are (none), 'json', 'msgpack', or 'yaml'.
    # node_cache_terminus = 

    # This setting has been deprecated. Use of any value other than 'hiera' should instead be configured
    # in a version 5 hiera.yaml. Until this setting is removed, it controls which data binding terminus
    # to use for global automatic data binding (across all environments). By default this value is 'hiera'.
    # A value of 'none' turns off the global binding.
    # The default value is 'hiera'.
    data_binding_terminus = hiera

    # The hiera configuration file. Puppet only reads this file on startup, so you must restart the puppet server every time you edit it.
    # The default value is '/etc/puppetlabs/puppet/hiera.yaml'.
    hiera_config = /etc/puppetlabs/puppet/hiera.yaml

    # The binder configuration file. Puppet reads this file on each request to configure the bindings system.
    # If set to nil (the default), a $confdir/binder_config.yaml is optionally loaded. If it does not exists, a default configuration
    # is used. If the setting :binding_config is specified, it must reference a valid and existing yaml file.
    # binder_config = 

    # Where to get node catalogs.  This is useful to change if, for instance,
    # you'd like to pre-compile catalogs and store them in memcached or some other easily-accessed store.
    # The default value is 'rest'.
    catalog_terminus = rest

    # How to store cached catalogs. Valid values are 'json', 'msgpack' and 'yaml'. The agent application defaults to 'json'.
    # The default value is 'json'.
    catalog_cache_terminus = json

    # The node facts terminus.
    # The default value is 'facter'.
    facts_terminus = facter

    # The external trusted facts script or directory to use.
    # This setting's value can be set to the path to an executable command that
    # can produce external trusted facts or to a directory containing those
    # executable commands. The command(s) must:
    # 
    # * Take the name of a node as a command-line argument.
    # * Return a JSON hash with the external trusted facts for this node.
    # * For unknown or invalid nodes, exit with a non-zero exit code.
    # 
    # If the setting points to an executable command, then the external trusted
    # facts will be stored in the 'external' key of the trusted facts hash. Otherwise
    # for each executable file in the directory, the external trusted facts will be
    # stored in the `<basename>` key of the `trusted['external']` hash. For example,
    # if the files foo.rb and bar.sh are in the directory, then `trusted['external']`
    # will be the hash `{ 'foo' => <foo.rb output>, 'bar' => <bar.sh output> }`.
    # trusted_external_command = 

    # The default source for files if no server is given in a
    # uri, e.g. puppet:///file. The default of `rest` causes the file to be
    # retrieved using the `server` setting. When running `apply` the default
    # is `file_server`, causing requests to be filled locally.
    # The default value is 'rest'.
    default_file_terminus = rest

    # The HTTP proxy host to use for outgoing connections. The proxy will be bypassed if
    # the server's hostname matches the NO_PROXY environment variable or `no_proxy` setting. Note: You
    # may need to use a FQDN for the server hostname when using a proxy. Environment variable
    # http_proxy or HTTP_PROXY will override this value.
    # The default value is 'none'.
    # http_proxy_host = none

    # The HTTP proxy port to use for outgoing connections
    # The default value is '3128'.
    # http_proxy_port = 3128

    # The user name for an authenticated HTTP proxy. Requires the `http_proxy_host` setting.
    # The default value is 'none'.
    # http_proxy_user = none

    # The password for the user of an authenticated HTTP proxy.
    # Requires the `http_proxy_user` setting.
    # 
    # Note that passwords must be valid when used as part of a URL. If a password
    # contains any characters with special meanings in URLs (as specified by RFC 3986
    # section 2.2), they must be URL-encoded. (For example, `#` would become `%23`.)
    # The default value is 'none'.
    # http_proxy_password = none

    # List of host or domain names that should not go through `http_proxy_host`. Environment variable no_proxy or NO_PROXY will override this value. Names can be specified as an FQDN `host.example.com`, wildcard `*.example.com`, dotted domain `.example.com`, or suffix `example.com`.
    # The default value is 'localhost, 127.0.0.1'.
    # no_proxy = localhost, 127.0.0.1

    # The maximum amount of time a persistent HTTP connection can remain idle in the connection pool, before it is closed.  This timeout should be shorter than the keepalive timeout used on the HTTP server, e.g. Apache KeepAliveTimeout directive.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '4s'.
    http_keepalive_timeout = 4

    # Whether to write HTTP request and responses to stderr. This should never be used in a production environment.
    # http_debug = false

    # The maximum amount of time to wait when establishing an HTTP connection. The default
    # value is 2 minutes.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    http_connect_timeout = 120

    # The time to wait for data to be read from an HTTP connection. If nothing is
    # read after the elapsed interval then the connection will be closed. The default value is 10 minutes.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '10m'.
    http_read_timeout = 600

    # The HTTP User-Agent string to send when making network requests.
    # The default value is 'Puppet/7.10.0 Ruby/2.7.3-p183 (x86_64-linux)'.
    # http_user_agent = Puppet/7.10.0 Ruby/2.7.3-p183 (x86_64-linux)

    # The minimum time to wait between checking for updates in
    # configuration files.  This timeout determines how quickly Puppet checks whether
    # a file (such as manifests or puppet.conf) has changed on disk. The default will
    # change in a future release to be 'unlimited', requiring a reload of the Puppet
    # service to pick up changes to its internal configuration. Currently we do not
    # accept a value of 'unlimited'. To reparse files within an environment in
    # Puppet Server please use the environment_cache endpoint
    # The default value is '15s'.
    filetimeout = 15

    # How long the Puppet server should cache data it loads from an
    # environment.
    # 
    # A value of `0` will disable caching. This setting can also be set to
    # `unlimited`, which will cache environments until the server is restarted
    # or told to refresh the cache. All other values will result in Puppet
    # server evicting environments that haven't been used within the last
    # `environment_timeout` seconds.
    # 
    # You should change this setting once your Puppet deployment is doing
    # non-trivial work. We chose the default value of `0` because it lets new
    # users update their code without any extra steps, but it lowers the
    # performance of your Puppet server. We recommend either:
    # 
    # * Setting this to `unlimited` and explicitly refreshing your Puppet server
    #   as part of your code deployment process.
    # 
    # * Setting this to a number that will keep your most actively used
    #   environments cached, but allow testing environments to fall out of the
    #   cache and reduce memory usage. A value of 3 minutes (3m) is a reasonable
    #   value.
    # 
    # Once you set `environment_timeout` to a non-zero value, you need to tell
    # Puppet server to read new code from disk using the `environment-cache` API
    # endpoint after you deploy new code. See the docs for the Puppet Server
    # [administrative API](https://puppet.com/docs/puppetserver/latest/admin-api/v1/environment-cache.html).
    # The default value is '0'.
    environment_timeout = 3m

    # The name of a registered environment data provider used when obtaining environment
    # specific data. The three built in and registered providers are 'none' (no data), 'function' (data
    # obtained by calling the function 'environment::data()') and 'hiera' (data obtained using a data
    # provider configured using a hiera.yaml file in root of the environment).
    # Other environment data providers may be registered in modules on the module path. For such
    # custom data providers see the respective module documentation. This setting is deprecated.
    # environment_data_provider = 

    # A command to run before every agent run.  If this command returns a non-zero
    # return code, the entire Puppet run will fail.
    # The default value is ''.
    # prerun_command = 

    # A command to run after every agent run.  If this command returns a non-zero
    # return code, the entire Puppet run will be considered to have failed, even though it might have
    # performed work during the normal run.
    # The default value is ''.
    # postrun_command = 

    # Freezes the 'main' class, disallowing any code to be added to it.  This
    # essentially means that you can't have any code outside of a node,
    # class, or definition other than in the site manifest.
    # freeze_main = false

    # The directory where catalog previews per node are generated.
    # The default value is '$vardir/preview'.
    preview_outputdir = /opt/puppetlabs/puppet/cache/preview

    # The name to use when handling certificates. When a node
    # requests a certificate from the CA Puppet Server, it uses the value of the
    # `certname` setting as its requested Subject CN.
    # 
    # This is the name used when managing a node's permissions in
    # Puppet Server's [auth.conf](https://puppet.com/docs/puppetserver/latest/config_file_auth.html).
    # In most cases, it is also used as the node's name when matching
    # [node definitions](https://puppet.com/docs/puppet/latest/lang_node_definitions.html)
    # and requesting data from an ENC. (This can be changed with the `node_name_value`
    # and `node_name_fact` settings, although you should only do so if you have
    # a compelling reason.)
    # 
    # A node's certname is available in Puppet manifests as `$trusted['certname']`. (See
    # [Facts and Built-In Variables](https://puppet.com/docs/puppet/latest/lang_facts_and_builtin_vars.html)
    # for more details.)
    # 
    # * For best compatibility, you should limit the value of `certname` to
    #   only use lowercase letters, numbers, periods, underscores, and dashes. (That is,
    #   it should match `/A[a-z0-9._-]+Z/`.)
    # * The special value `ca` is reserved, and can't be used as the certname
    #   for a normal node.
    # 
    #   **Note:** You must set the certname in the main section of the puppet.conf file. Setting it in a different section causes errors.
    # 
    # Defaults to the node's fully qualified domain name.
    # The default value is 'puppetserver.sansovo.org'.
    certname = puppetserver.sansovo.org

    # A comma-separated list of alternate DNS names for Puppet Server. These are extra
    # hostnames (in addition to its `certname`) that the server is allowed to use when
    # serving agents. Puppet checks this setting when automatically creating a
    # certificate for Puppet agent or Puppet Server. These can be either IP or DNS, and the type
    # should be specified and followed with a colon. Untyped inputs will default to DNS.
    # 
    # In order to handle agent requests at a given hostname (like
    # "puppet.example.com"), Puppet Server needs a certificate that proves it's
    # allowed to use that name; if a server shows a certificate that doesn't include
    # its hostname, Puppet agents will refuse to trust it. If you use a single
    # hostname for Puppet traffic but load-balance it to multiple Puppet Servers, each
    # of those servers needs to include the official hostname in its list of extra
    # names.
    # 
    # **Note:** The list of alternate names is locked in when the server's
    # certificate is signed. If you need to change the list later, you can't just
    # change this setting; you also need to regenerate the certificate. For more
    # information on that process, see the
    # [cert regen docs](https://puppet.com/docs/puppet/latest/ssl_regenerate_certificates.html).
    # 
    # To see all the alternate names your servers are using, log into your CA server
    # and run `puppetserver ca list --all`, then check the output for `(alt names: ...)`.
    # Most agent nodes should NOT have alternate names; the only certs that should
    # have them are Puppet Server nodes that you want other agents to trust.
    # The default value is ''.
    # dns_alt_names = 

    # An optional file containing custom attributes to add to certificate signing
    # requests (CSRs). You should ensure that this file does not exist on your CA
    # Puppet Server; if it does, unwanted certificate extensions may leak into
    # certificates created with the `puppetserver ca generate` command.
    # 
    # If present, this file must be a YAML hash containing a `custom_attributes` key
    # and/or an `extension_requests` key. The value of each key must be a hash, where
    # each key is a valid OID and each value is an object that can be cast to a string.
    # 
    # Custom attributes can be used by the CA when deciding whether to sign the
    # certificate, but are then discarded. Attribute OIDs can be any OID value except
    # the standard CSR attributes (i.e. attributes described in RFC 2985 section 5.4).
    # This is useful for embedding a pre-shared key for autosigning policy executables
    # (see the `autosign` setting), often by using the `1.2.840.113549.1.9.7`
    # ("challenge password") OID.
    # 
    # Extension requests will be permanently embedded in the final certificate.
    # Extension OIDs must be in the "ppRegCertExt" (`1.3.6.1.4.1.34380.1.1`),
    # "ppPrivCertExt" (`1.3.6.1.4.1.34380.1.2`), or
    # "ppAuthCertExt" (`1.3.6.1.4.1.34380.1.3`) OID arcs. The ppRegCertExt arc is
    # reserved for four of the most common pieces of data to embed: `pp_uuid` (`.1`),
    # `pp_instance_id` (`.2`), `pp_image_name` (`.3`), and `pp_preshared_key` (`.4`)
    # --- in the YAML file, these can be referred to by their short descriptive names
    # instead of their full OID. The ppPrivCertExt arc is unregulated, and can be used
    # for site-specific extensions. The ppAuthCert arc is reserved for two pieces of
    # data to embed: `pp_authorization` (`.1`) and `pp_auth_role` (`.13`). As with
    # ppRegCertExt, in the YAML file, these can be referred to by their short
    # descriptive name instead of their full OID.
    # The default value is '$confdir/csr_attributes.yaml'.
    csr_attributes = /etc/puppetlabs/puppet/csr_attributes.yaml

    # The certificate directory.
    # The default value is '$ssldir/certs'.
    certdir = /etc/puppetlabs/puppet/ssl/certs

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = /etc/puppetlabs/puppet/ssl

    # A lock file to indicate that the ssl bootstrap process is currently in progress.
    # The default value is '$ssldir/ssl.lock'.
    ssl_lockfile = /etc/puppetlabs/puppet/ssl/ssl.lock

    # The public key directory.
    # The default value is '$ssldir/public_keys'.
    publickeydir = /etc/puppetlabs/puppet/ssl/public_keys

    # Where host certificate requests are stored.
    # The default value is '$ssldir/certificate_requests'.
    requestdir = /etc/puppetlabs/puppet/ssl/certificate_requests

    # The private key directory.
    # The default value is '$ssldir/private_keys'.
    privatekeydir = /etc/puppetlabs/puppet/ssl/private_keys

    # Where the client stores private certificate information.
    # The default value is '$ssldir/private'.
    privatedir = /etc/puppetlabs/puppet/ssl/private

    # Where puppet agent stores the password for its private key.
    # Generally unused.
    # The default value is '$privatedir/password'.
    passfile = /etc/puppetlabs/puppet/ssl/private/password

    # Where individual hosts store their certificate request (CSR)
    # while waiting for the CA to issue their certificate.
    # The default value is '$requestdir/$certname.pem'.
    hostcsr = /etc/puppetlabs/puppet/ssl/certificate_requests/puppetserver.sansovo.org.pem

    # Where individual hosts store and look for their certificates.
    # The default value is '$certdir/$certname.pem'.
    hostcert = /etc/puppetlabs/puppet/ssl/certs/puppetserver.sansovo.org.pem

    # Where individual hosts store and look for their private key.
    # The default value is '$privatekeydir/$certname.pem'.
    hostprivkey = /etc/puppetlabs/puppet/ssl/private_keys/puppetserver.sansovo.org.pem

    # Where individual hosts store and look for their public key.
    # The default value is '$publickeydir/$certname.pem'.
    hostpubkey = /etc/puppetlabs/puppet/ssl/public_keys/puppetserver.sansovo.org.pem

    # Where each client stores the CA certificate.
    # The default value is '$certdir/ca.pem'.
    localcacert = /etc/puppetlabs/puppet/ssl/certs/ca.pem

    # The expected fingerprint of the CA certificate. If specified, the agent
    # will compare the CA certificate fingerprint that it downloads against this value
    # and reject the CA certificate if the values do not match. This only applies
    # during the first download of the CA certificate.
    # ca_fingerprint = 

    # A file containing CA certificates in PEM format that puppet should trust
    # when making HTTPS requests. This **only** applies to https requests to non-puppet
    # infrastructure, such as retrieving file metadata and content from https file sources,
    # puppet module tool and the 'http' report processor. This setting is ignored when
    # making requests to puppet:// URLs such as catalog and report requests.
    # ssl_trust_store = 

    # Where the host's certificate revocation list can be found.
    # This is distinct from the certificate authority's CRL.
    # The default value is '$ssldir/crl.pem'.
    hostcrl = /etc/puppetlabs/puppet/ssl/crl.pem

    # Whether certificate revocation checking should be enabled, and what level of
    # checking should be performed.
    # 
    # When certificate revocation is enabled, Puppet expects the contents of its CRL
    # to be one or more PEM-encoded CRLs concatenated together. When using a cert
    # bundle, CRLs for all CAs in the chain of trust must be included in the crl file.
    # The chain should be ordered from least to most authoritative, with the first CRL
    # listed being for the root of the chain and the last being for the leaf CA.
    # 
    # When certificate_revocation is set to 'true' or 'chain', Puppet ensures
    # that each CA in the chain of trust has not been revoked by its issuing CA.
    # 
    # When certificate_revocation is set to 'leaf', Puppet verifies certs against
    # the issuing CA's revocation list, but it does not verify the revocation status
    # of the issuing CA or any CA above it within the chain of trust.
    # 
    # When certificate_revocation is set to 'false', Puppet disables all
    # certificate revocation checking and does not attempt to download the CRL.
    # The default value is 'chain'.
    certificate_revocation = chain

    # The list of ciphersuites for TLS connections initiated by puppet. The
    # default value is chosen to support TLS 1.0 and up, but can be made
    # more restrictive if needed. The ciphersuites must be specified in OpenSSL
    # format, not IANA.
    # The default value is 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256'.
    # ciphers = ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256

    # The type of private key. Valid values are `rsa` and `ec`. Default is `rsa`.
    # The default value is 'rsa'.
    # key_type = rsa

    # The short name for the EC curve used to generate the EC private key. Valid
    # values must be one of the curves in `OpenSSL::PKey::EC.builtin_curves`.
    # Default is `prime256v1`.
    # The default value is 'prime256v1'.
    # named_curve = prime256v1

    # Which digest algorithm to use for file resources and the filebucket.
    # Valid values are sha256, sha384, sha512, sha224, md5. Default is
    # sha256.
    # The default value is 'sha256'.
    digest_algorithm = sha256

    # Checksum types supported by this agent for use in file resources of a
    # static catalog. Values must be comma-separated. Valid types are
    # sha256, sha256lite, sha384, sha512, sha224, sha1, sha1lite, md5, md5lite, mtime, ctime. Default is
    # sha256, sha384, sha512, sha224, md5.
    # The default value is '["sha256", "sha384", "sha512", "sha224", "md5"]'.
    supported_checksum_types = ["sha256", "sha384", "sha512", "sha224", "md5"]

    # Where to send log messages. Choose between 'syslog' (the POSIX syslog
    # service), 'eventlog' (the Windows Event Log), 'console', or the path to a log
    # file. Multiple destinations can be set using a comma separated list (eg: `/path/file1,console,/path/file2`)
    # logdest = 

    # Where Puppet should store plugins that it pulls down from the central
    # server.
    # The default value is '$libdir'.
    plugindest = /opt/puppetlabs/puppet/cache/lib

    # From where to retrieve plugins.  The standard Puppet `file` type
    # is used for retrieval, so anything that is a valid file source can
    # be used here.
    # The default value is 'puppet:///plugins'.
    # pluginsource = puppet:///plugins

    # Where Puppet should store external facts that are being handled by pluginsync
    # The default value is '$vardir/facts.d'.
    pluginfactdest = /opt/puppetlabs/puppet/cache/facts.d

    # Where to retrieve external facts for pluginsync
    # The default value is 'puppet:///pluginfacts'.
    # pluginfactsource = puppet:///pluginfacts

    # Where Puppet should store translation files that it pulls down from the central
    # server.
    # The default value is '$vardir/locales'.
    localedest = /opt/puppetlabs/puppet/cache/locales

    # From where to retrieve translation files.  The standard Puppet `file` type
    # is used for retrieval, so anything that is a valid file source can
    # be used here.
    # The default value is 'puppet:///locales'.
    # localesource = puppet:///locales

    # Whether plugins should be synced with the central server. This setting is
    # deprecated.
    # The default value is 'true'.
    # pluginsync = true

    # What files to ignore when pulling down plugins.
    # The default value is '.svn CVS .git .hg'.
    # pluginsignore = .svn CVS .git .hg

    # Whether the puppet run should ignore errors during pluginsync. If the setting
    # is false and there are errors during pluginsync, then the agent will abort the run and
    # submit a report containing information about the failed run.
    # ignore_plugin_errors = false

    # Where Puppet should look for facts.  Multiple directories should
    # be separated by the system path separator character. (The POSIX path
    # separator is ':', and the Windows path separator is ';'.)
    # The default value is '$vardir/lib/facter:$vardir/facts'.
    factpath = /opt/puppetlabs/puppet/cache/lib/facter:/opt/puppetlabs/puppet/cache/facts

    # The external node classifier (ENC) script to use for node data.
    # Puppet combines this data with the main manifest to produce node catalogs.
    # 
    # To enable this setting, set the `node_terminus` setting to `exec`.
    # 
    # This setting's value must be the path to an executable command that
    # can produce node information. The command must:
    # 
    # * Take the name of a node as a command-line argument.
    # * Return a YAML hash with up to three keys:
    #   * `classes` --- A list of classes, as an array or hash.
    #   * `environment` --- A string.
    #   * `parameters` --- A list of top-scope variables to set, as a hash.
    # * For unknown nodes, exit with a non-zero exit code.
    # 
    # Generally, an ENC script makes requests to an external data source.
    # 
    # For more info, see [the ENC documentation](https://puppet.com/docs/puppet/latest/nodes_external.html).
    # The default value is 'none'.
    # external_nodes = none

    # Enables having extended data in the catalog by storing them as a hash with the special key
    # `__ptype`. When enabled, resource containing values of the data types `Binary`, `Regexp`,
    # `SemVer`, `SemVerRange`, `Timespan` and `Timestamp`, as well as instances of types derived
    # from `Object` retain their data type.
    # The default value is 'true'.
    # rich_data = true

    # The module repository
    # The default value is 'https://forgeapi.puppet.com'.
    # module_repository = https://forgeapi.puppet.com

    # The directory into which module tool data is stored
    # The default value is '$vardir/puppet-module'.
    module_working_dir = /opt/puppetlabs/puppet/cache/puppet-module

    # The authorization key to connect to the Puppet Forge. Leave blank for unauthorized or license based connections
    # forge_authorization = 

    # Extra module groups to request from the Puppet Forge. This is an internal setting, and users should never change it.
    # module_groups = 

    # The name to use the Certificate Authority certificate.
    # The default value is 'Puppet CA: $certname'.
    ca_name = Puppet CA: puppetserver.sansovo.org

    # The root directory for the certificate authority.
    # The default value is '/etc/puppetlabs/puppetserver/ca'.
    cadir = /etc/puppetlabs/puppetserver/ca

    # The CA certificate.
    # The default value is '$cadir/ca_crt.pem'.
    cacert = /etc/puppetlabs/puppetserver/ca/ca_crt.pem

    # The CA private key.
    # The default value is '$cadir/ca_key.pem'.
    cakey = /etc/puppetlabs/puppetserver/ca/ca_key.pem

    # The CA public key.
    # The default value is '$cadir/ca_pub.pem'.
    capub = /etc/puppetlabs/puppetserver/ca/ca_pub.pem

    # The certificate revocation list (CRL) for the CA.
    # The default value is '$cadir/ca_crl.pem'.
    cacrl = /etc/puppetlabs/puppetserver/ca/ca_crl.pem

    # Where the CA stores certificate requests.
    # The default value is '$cadir/requests'.
    csrdir = /etc/puppetlabs/puppetserver/ca/requests

    # Where the CA stores signed certificates.
    # The default value is '$cadir/signed'.
    signeddir = /etc/puppetlabs/puppetserver/ca/signed

    # Where the serial number for certificates is stored.
    # The default value is '$cadir/serial'.
    serial = /etc/puppetlabs/puppetserver/ca/serial

    # Whether (and how) to autosign certificate requests. This setting
    # is only relevant on a Puppet Server acting as a certificate authority (CA).
    # 
    # Valid values are true (autosigns all certificate requests; not recommended),
    # false (disables autosigning certificates), or the absolute path to a file.
    # 
    # The file specified in this setting may be either a **configuration file**
    # or a **custom policy executable.** Puppet will automatically determine
    # what it is: If the Puppet user (see the `user` setting) can execute the
    # file, it will be treated as a policy executable; otherwise, it will be
    # treated as a config file.
    # 
    # If a custom policy executable is configured, the CA Puppet Server will run it
    # every time it receives a CSR. The executable will be passed the subject CN of the
    # request _as a command line argument,_ and the contents of the CSR in PEM format
    # _on stdin._ It should exit with a status of 0 if the cert should be autosigned
    # and non-zero if the cert should not be autosigned.
    # 
    # If a certificate request is not autosigned, it will persist for review. An admin
    # user can use the `puppetserver ca sign` command to manually sign it, or can delete
    # the request.
    # 
    # For info on autosign configuration files, see
    # [the guide to Puppet's config files](https://puppet.com/docs/puppet/latest/config_file_autosign.html).
    # The default value is '$confdir/autosign.conf'.
    autosign = /etc/puppetlabs/puppet/autosign.conf

    # Whether to allow a new certificate request to overwrite an existing
    # certificate request. If true, then the old certificate must be cleaned using
    # `puppetserver ca clean`, and the new request signed using `puppetserver ca sign`.
    # allow_duplicate_certs = false

    # The default TTL for new certificates.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '5y'.
    ca_ttl = 157680000

    # How often the Puppet agent refreshes its local CRL. By
    # default the CRL is only downloaded once, and never refreshed. If a
    # duration is specified, then the agent will refresh its CRL whenever it
    # next runs and the elapsed time since the CRL was last refreshed exceeds
    # the duration.
    # 
    # In general, the duration should be greater than the `runinterval`.
    # Setting it to an equal or lesser value will cause the CRL to be
    # refreshed on every run.
    # 
    # If the agent downloads a new CRL, the agent will use it for subsequent
    # network requests. If the refresh request fails or if the CRL is
    # unchanged on the server, then the agent run will continue using the
    # local CRL it already has.This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # crl_refresh_interval = 

    # The bit length of keys.
    # The default value is '4096'.
    # keylength = 4096

    # The inventory file. This is a text file to which the CA writes a
    # complete listing of all certificates.
    # The default value is '$cadir/inventory.txt'.
    cert_inventory = /etc/puppetlabs/puppetserver/ca/inventory.txt

    # The name of the puppet config file.
    # The default value is 'puppet.conf'.
    # config_file_name = puppet.conf

    # The configuration file for the current puppet application.
    # The default value is '$confdir/${config_file_name}'.
    config = /etc/puppetlabs/puppet/puppet.conf

    # The file containing the PID of a running process.
    # This file is intended to be used by service management frameworks
    # and monitoring systems to determine if a puppet process is still in
    # the process table.
    # The default value is '$rundir/${run_mode}.pid'.
    pidfile = /var/run/puppetlabs/agent.pid

    # The address the agent should use to initiate requests.
    # sourceaddress = 

    # The entry-point manifest for the primary server. This can be one file
    # or a directory of manifests to be evaluated in alphabetical order. Puppet manages
    # this path as a directory if one exists or if the path ends with a / or \.
    # 
    # Setting a global value for `manifest` in puppet.conf is not allowed
    # (but it can be overridden from the commandline). Please use
    # directory environments instead. If you need to use something other than the
    # environment's `manifests` directory as the main manifest, you can set
    # `manifest` in environment.conf. For more info, see
    # <https://puppet.com/docs/puppet/latest/environments_about.html>
    # manifest = 

    # The search path for modules, as a list of directories separated by the system
    # path separator character. (The POSIX path separator is ':', and the
    # Windows path separator is ';'.)
    # 
    # Setting a global value for `modulepath` in puppet.conf is not allowed
    # (but it can be overridden from the commandline). Please use
    # directory environments instead. If you need to use something other than the
    # default modulepath of `<ACTIVE ENVIRONMENT'S MODULES DIR>:$basemodulepath`,
    # you can set `modulepath` in environment.conf. For more info, see
    # <https://puppet.com/docs/puppet/latest/environments_about.html>
    # The default value is ''.
    # modulepath = 

    # How to determine the configuration version.  By default, it will be the
    # time that the configuration is parsed, but you can provide a shell script to override how the
    # version is determined.  The output of this script will be added to every log message in the
    # reports, allowing you to correlate changes on your hosts to the source version on the server.
    # 
    # Setting a global value for config_version in puppet.conf is not allowed
    # (but it can be overridden from the commandline). Please set a
    # per-environment value in environment.conf instead. For more info, see
    # <https://puppet.com/docs/puppet/latest/environments_about.html>
    # The default value is ''.
    # config_version = 

    # The user Puppet Server will run as. Used to ensure
    # the agent side processes (agent, apply, etc) create files and
    # directories readable by Puppet Server when necessary.
    # The default value is 'puppet'.
    # user = puppet

    # The group Puppet Server will run as. Used to ensure
    # the agent side processes (agent, apply, etc) create files and
    # directories readable by Puppet Server when necessary.
    # The default value is 'puppet'.
    # group = puppet

    # The default main manifest for directory environments. Any environment that
    # doesn't set the `manifest` setting in its `environment.conf` file will use
    # this manifest.
    # 
    # This setting's value can be an absolute or relative path. An absolute path
    # will make all environments default to the same main manifest; a relative
    # path will allow each environment to use its own manifest, and Puppet will
    # resolve the path relative to each environment's main directory.
    # 
    # In either case, the path can point to a single file or to a directory of
    # manifests to be evaluated in alphabetical order.
    # The default value is './manifests'.
    # default_manifest = ./manifests

    # Whether to disallow an environment-specific main manifest. When set
    # to `true`, Puppet will use the manifest specified in the `default_manifest` setting
    # for all environments. If an environment specifies a different main manifest in its
    # `environment.conf` file, catalog requests for that environment will fail with an error.
    # 
    # This setting requires `default_manifest` to be set to an absolute path.
    # disable_per_environment_manifest = false

    # Code to parse directly.  This is essentially only used
    # by `puppet`, and should only be set if you're writing your own Puppet
    # executable.
    # The default value is ''.
    # code = 

    # The default port puppet subcommands use to communicate
    # with Puppet Server. (eg `puppet facts upload`, `puppet agent`). May be
    # overridden by more specific settings (see `ca_port`, `report_port`).
    # The default value is '8140'.
    # masterport = 8140

    # The default port puppet subcommands use to communicate
    # with Puppet Server. (eg `puppet facts upload`, `puppet agent`). May be
    # overridden by more specific settings (see `ca_port`, `report_port`).
    # The default value is '8140'.
    # masterport = 8140

    # Where FileBucket files are stored.
    # The default value is '$vardir/bucket'.
    bucketdir = /opt/puppetlabs/puppet/cache/bucket

    # File that provides mapping between custom SSL oids and user-friendly names
    # The default value is '$confdir/custom_trusted_oid_mapping.yaml'.
    trusted_oid_mapping_file = /etc/puppetlabs/puppet/custom_trusted_oid_mapping.yaml

    # The search path for **global** modules. Should be specified as a
    # list of directories separated by the system path separator character. (The
    # POSIX path separator is ':', and the Windows path separator is ';'.)
    # 
    # These are the modules that will be used by _all_ environments. Note that
    # the `modules` directory of the active environment will have priority over
    # any global directories. For more info, see
    # <https://puppet.com/docs/puppet/latest/environments_about.html>
    # The default value is '$codedir/modules:/opt/puppetlabs/puppet/modules'.
    basemodulepath = /etc/puppetlabs/code/modules:/opt/puppetlabs/puppet/modules

    # The directory containing **vendored** modules. These modules will
    # be used by _all_ environments like those in the `basemodulepath`. The only
    # difference is that modules in the `basemodulepath` are pluginsynced, while
    # vendored modules are not
    # The default value is '/opt/puppetlabs/puppet/vendor_modules'.
    vendormoduledir = /opt/puppetlabs/puppet/vendor_modules

    # The header containing an authenticated client's SSL DN.
    # This header must be set by the proxy to the authenticated client's SSL
    # DN (e.g., `/CN=puppet.puppetlabs.com`).  Puppet will parse out the Common
    # Name (CN) from the Distinguished Name (DN) and use the value of the CN
    # field for authorization.
    # 
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway interface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-DN` header, this setting should be `HTTP_X_CLIENT_DN`.
    # The default value is 'HTTP_X_CLIENT_DN'.
    # ssl_client_header = HTTP_X_CLIENT_DN

    # The header containing the status message of the client
    # verification. This header must be set by the proxy to 'SUCCESS' if the
    # client successfully authenticated, and anything else otherwise.
    # 
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway interface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-Verify` header, this setting should be
    # `HTTP_X_CLIENT_VERIFY`.
    # The default value is 'HTTP_X_CLIENT_VERIFY'.
    # ssl_client_verify_header = HTTP_X_CLIENT_VERIFY

    # The directory in which YAML data is stored, usually in a subdirectory.
    # The default value is '$vardir/yaml'.
    yamldir = /opt/puppetlabs/puppet/cache/yaml

    # The directory in which serialized data is stored, usually in a subdirectory.
    # The default value is '$vardir/server_data'.
    server_datadir = /opt/puppetlabs/puppet/cache/server_data

    # The list of report handlers to use. When using multiple report handlers,
    # their names should be comma-separated, with whitespace allowed. (For example,
    # `reports = http, store`.)
    # 
    # This setting is relevant to puppet server and puppet apply. The primary Puppet
    # server will call these report handlers with the reports it receives from
    # agent nodes, and puppet apply will call them with its own report. (In
    # all cases, the node applying the catalog must have `report = true`.)
    # 
    # See the report reference for information on the built-in report
    # handlers; custom report handlers can also be loaded from modules.
    # (Report handlers are loaded from the lib directory, at
    # `puppet/reports/NAME.rb`.)
    # 
    # To turn off reports entirely, set this to `none`
    # The default value is 'store'.
    # reports = store

    # The directory in which to store reports. Each node gets
    # a separate subdirectory in this directory. This setting is only
    # used when the `store` report processor is enabled (see the
    # `reports` setting).
    # The default value is '$vardir/reports'.
    reportdir = /opt/puppetlabs/puppet/cache/reports

    # The URL that reports should be forwarded to. This setting
    # is only used when the `http` report processor is enabled (see the
    # `reports` setting).
    # The default value is 'http://localhost:3000/reports/upload'.
    # reporturl = http://localhost:3000/reports/upload

    # Where the fileserver configuration is stored.
    # The default value is '$confdir/fileserver.conf'.
    fileserverconfig = /etc/puppetlabs/puppet/fileserver.conf

    # Whether to store each client's configuration, including catalogs, facts,
    # and related data. This also enables the import and export of resources in
    # the Puppet language - a mechanism for exchange resources between nodes.
    # 
    # By default this uses the 'puppetdb' backend.
    # 
    # You can adjust the backend using the storeconfigs_backend setting.
    # storeconfigs = false

    # Configure the backend terminus used for StoreConfigs.
    # By default, this uses the PuppetDB store, which must be installed
    # and configured before turning on StoreConfigs.
    # The default value is 'puppetdb'.
    storeconfigs_backend = puppetdb

    # The root directory of devices' $vardir.
    # The default value is '$vardir/devices'.
    devicedir = /opt/puppetlabs/puppet/cache/devices

    # Path to the device config file for puppet device.
    # The default value is '$confdir/device.conf'.
    deviceconfig = /etc/puppetlabs/puppet/device.conf

    # The explicit value used for the node name for all requests the agent
    # makes to the primary server. WARNING: This setting is mutually exclusive with
    # node_name_fact.  Changing this setting also requires changes to
    # Puppet Server's default [auth.conf](https://puppet.com/docs/puppetserver/latest/config_file_auth.html).
    # The default value is '$certname'.
    node_name_value = puppetserver.sansovo.org

    # The fact name used to determine the node name used for all requests the agent
    # makes to the primary server. WARNING: This setting is mutually exclusive with
    # node_name_value.  Changing this setting also requires changes to
    # Puppet Server's default [auth.conf](https://puppet.com/docs/puppetserver/latest/config_file_auth.html).
    # The default value is ''.
    # node_name_fact = 

    # Where Puppet agent and Puppet Server store state associated
    # with the running configuration.  In the case of Puppet Server,
    # this file reflects the state discovered through interacting
    # with clients.
    # The default value is '$statedir/state.yaml'.
    statefile = /opt/puppetlabs/puppet/cache/state/state.yaml

    # How long the Puppet agent should cache when a resource was last checked or synced.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # A value of `0` or `unlimited` will disable cache pruning.
    # 
    # This setting affects the usage of `schedule` resources, as the information
    # about when a resource was last checked (and therefore when it needs to be
    # checked again) is stored in the `statefile`. The `statettl` needs to be
    # large enough to ensure that a resource will not trigger multiple times
    # during a schedule due to its entry expiring from the cache.
    # The default value is '32d'.
    statettl = 2764800

    # Transactional storage file for persisting data between
    # transactions for the purposes of infering information (such as
    # corrective_change) on new data received.
    # The default value is '$statedir/transactionstore.yaml'.
    transactionstorefile = /opt/puppetlabs/puppet/cache/state/transactionstore.yaml

    # The directory in which client-side YAML data is stored.
    # The default value is '$vardir/client_yaml'.
    clientyamldir = /opt/puppetlabs/puppet/cache/client_yaml

    # The directory in which serialized data is stored on the client.
    # The default value is '$vardir/client_data'.
    client_datadir = /opt/puppetlabs/puppet/cache/client_data

    # The file in which puppet agent stores a list of the classes
    # associated with the retrieved configuration.  Can be loaded in
    # the separate `puppet` executable using the `--loadclasses`
    # option.
    # The default value is '$statedir/classes.txt'.
    classfile = /opt/puppetlabs/puppet/cache/state/classes.txt

    # The file in which puppet agent stores a list of the resources
    # associated with the retrieved configuration.
    # The default value is '$statedir/resources.txt'.
    resourcefile = /opt/puppetlabs/puppet/cache/state/resources.txt

    # The fallback log file. This is only used when the `--logdest` option
    # is not specified AND Puppet is running on an operating system where both
    # the POSIX syslog service and the Windows Event Log are unavailable. (Currently,
    # no supported operating systems match that description.)
    # 
    # Despite the name, both puppet agent and puppet server will use this file
    # as the fallback logging destination.
    # 
    # For control over logging destinations, see the `--logdest` command line
    # option in the manual pages for puppet server, puppet agent, and puppet
    # apply. You can see man pages by running `puppet <SUBCOMMAND> --help`,
    # or read them online at https://puppet.com/docs/puppet/latest/man/.
    # The default value is '$logdir/puppetd.log'.
    puppetdlog = /var/log/puppetlabs/puppet/puppetd.log

    # The root directory of devices' $confdir.
    # The default value is '$confdir/devices'.
    deviceconfdir = /etc/puppetlabs/puppet/devices

    # The primary Puppet server to which the Puppet agent should connect.
    # The default value is 'puppet'.
    # server = puppet

    # The list of primary Puppet servers to which the Puppet agent should connect,
    # in the order that they will be tried. Each value should be a fully qualified domain name, followed by an optional ':' and port number. If a port is omitted, Puppet uses masterport for that host.
    # The default value is '[]'.
    # server_list = []

    # Whether the server will search for SRV records in DNS for the current domain.
    # use_srv_records = false

    # The domain which will be queried to find the SRV records of servers to use.
    # The default value is 'sansovo.org'.
    srv_domain = sansovo.org

    # The list of extra headers that will be sent with http requests to the primary server.
    # The header definition consists of a name and a value separated by a colon.
    # The default value is '[]'.
    # http_extra_headers = []

    # Boolean; whether puppet agent should ignore schedules.  This is useful
    # for initial puppet agent runs.
    # ignoreschedules = false

    # Boolean; whether to generate the default schedule resources. Setting this to
    # false is useful for keeping external report processors clean of skipped schedule resources.
    # The default value is 'true'.
    # default_schedules = true

    # Whether to apply catalogs in noop mode, which allows Puppet to
    # partially simulate a normal run. This setting affects puppet agent and
    # puppet apply.
    # 
    # When running in noop mode, Puppet will check whether each resource is in sync,
    # like it does when running normally. However, if a resource attribute is not in
    # the desired state (as declared in the catalog), Puppet will take no
    # action, and will instead report the changes it _would_ have made. These
    # simulated changes will appear in the report sent to the primary Puppet server, or
    # be shown on the console if running puppet agent or puppet apply in the
    # foreground. The simulated changes will not send refresh events to any
    # subscribing or notified resources, although Puppet will log that a refresh
    # event _would_ have been sent.
    # 
    # **Important note:**
    # [The `noop` metaparameter](https://puppet.com/docs/puppet/latest/metaparameter.html#noop)
    # allows you to apply individual resources in noop mode, and will override
    # the global value of the `noop` setting. This means a resource with
    # `noop => false` _will_ be changed if necessary, even when running puppet
    # agent with `noop = true` or `--noop`. (Conversely, a resource with
    # `noop => true` will only be simulated, even when noop mode is globally disabled.)
    # noop = false

    # How often puppet agent applies the catalog.
    # Note that a runinterval of 0 means "run continuously" rather than
    # "never run." This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '30m'.
    runinterval = 1800

    # The maximum amount of time an agent run is allowed to take.
    # A Puppet agent run that exceeds this timeout will be aborted. A value
    # of 0 disables the timeout. Defaults to 1 hour. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '1h'.
    runtimeout = 3600

    # The server to use for certificate
    # authority requests.  It's a separate server because it cannot
    # and does not need to horizontally scale.
    # The default value is '$server'.
    # ca_server = puppet

    # The port to use for the certificate authority.
    # The default value is '$serverport'.
    ca_port = 8140

    # The preferred means of serializing
    # ruby instances for passing over the wire.  This won't guarantee that all
    # instances will be serialized using this method, since not all classes
    # can be guaranteed to support this format, but it will be used for all
    # classes that support it.
    # The default value is 'json'.
    # preferred_serialization_format = json

    # A lock file to indicate that a puppet agent catalog run is currently in progress.
    # The file contains the pid of the process that holds the lock on the catalog run.
    # The default value is '$statedir/agent_catalog_run.lock'.
    agent_catalog_run_lockfile = /opt/puppetlabs/puppet/cache/state/agent_catalog_run.lock

    # A lock file to indicate that puppet agent runs have been administratively
    # disabled.  File contains a JSON object with state information.
    # The default value is '$statedir/agent_disabled.lock'.
    agent_disabled_lockfile = /opt/puppetlabs/puppet/cache/state/agent_disabled.lock

    # Whether to use the cached configuration when the remote
    # configuration will not compile.  This option is useful for testing
    # new configurations, where you want to fix the broken configuration
    # rather than reverting to a known-good one.
    # The default value is 'true'.
    # usecacheonfailure = true

    # The soft limit for the length of a fact name.
    # The default value is '2560'.
    # fact_name_length_soft_limit = 2560

    # The soft limit for the length of a fact value.
    # The default value is '4096'.
    # fact_value_length_soft_limit = 4096

    # The soft limit for the number of top level facts.
    # The default value is '512'.
    # top_level_facts_soft_limit = 512

    # The soft limit for the total number of facts.
    # The default value is '2048'.
    # number_of_facts_soft_limit = 2048

    # The soft limit for the size of the payload.
    # The default value is '16777216'.
    # payload_soft_limit = 16777216

    # Whether to only use the cached catalog rather than compiling a new catalog
    # on every run.  Puppet can be run with this enabled by default and then selectively
    # disabled when a recompile is desired. Because a Puppet agent using cached catalogs
    # does not contact the primary server for a new catalog, it also does not upload facts at
    # the beginning of the Puppet run.
    # use_cached_catalog = false

    # Skip searching for classes and definitions that were missing during a
    # prior compilation. The list of missing objects is maintained per-environment and
    # persists until the environment is cleared or the primary server is restarted.
    # ignoremissingtypes = false

    # The maximum time to delay before an agent's first run when
    # `splay` is enabled. Defaults to the agent's `$runinterval`. The
    # `splay` interval is random and recalculated each time the agent is started or
    # restarted. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '$runinterval'.
    splaylimit = 1800

    # Whether to sleep for a random amount of time, ranging from
    # immediately up to its `$splaylimit`, before performing its first agent run
    # after a service restart. After this period, the agent runs periodically
    # on its `$runinterval`.
    # 
    # For example, assume a default 30-minute `$runinterval`, `splay` set to its
    # default of `false`, and an agent starting at :00 past the hour. The agent
    # would check in every 30 minutes at :01 and :31 past the hour.
    # 
    # With `splay` enabled, it waits any amount of time up to its `$splaylimit`
    # before its first run. For example, it might randomly wait 8 minutes,
    # then start its first run at :08 past the hour. With the `$runinterval`
    # at its default 30 minutes, its next run will be at :38 past the hour.
    # 
    # If you restart an agent's puppet service with `splay` enabled, it
    # recalculates its splay period and delays its first agent run after
    # restarting for this new period. If you simultaneously restart a group of
    # puppet agents with `splay` enabled, their checkins to your primary servers
    # can be distributed more evenly.
    # splay = false

    # Where FileBucket files are stored locally.
    # The default value is '$vardir/clientbucket'.
    clientbucketdir = /opt/puppetlabs/puppet/cache/clientbucket

    # The server to send transaction reports to.
    # The default value is '$server'.
    # report_server = puppet

    # The port to communicate with the report_server.
    # The default value is '$serverport'.
    report_port = 8140

    # Whether to send reports after every transaction.
    # The default value is 'true'.
    # report = true

    # Whether the 'http' report processor should include the system
    # certificate store when submitting reports to HTTPS URLs. If false, then
    # the 'http' processor will only trust HTTPS report servers whose certificates
    # are issued by the puppet CA or one of its intermediate CAs. If true, the
    # processor will additionally trust CA certificates in the system's
    # certificate store.
    # report_include_system_store = false

    # Whether to send updated facts after every transaction. By default
    # puppet only submits facts at the beginning of the transaction before applying a
    # catalog. Since puppet can modify the state of the system, the value of the facts
    # may change after puppet finishes. Therefore, any facts stored in puppetdb may not
    # be consistent until the agent next runs, typically in 30 minutes. If this feature
    # is enabled, puppet will resubmit facts after applying its catalog, ensuring facts
    # for the node stored in puppetdb are current. However, this will double the fact
    # submission load on puppetdb, so it is disabled by default.
    # resubmit_facts = false

    # Where Puppet stores public files.
    # The default value is '/opt/puppetlabs/puppet/public'.
    publicdir = /opt/puppetlabs/puppet/public

    # Where puppet agent stores the last run report summary in yaml format.
    # The default value is '$publicdir/last_run_summary.yaml'.
    lastrunfile = /opt/puppetlabs/puppet/public/last_run_summary.yaml

    # Where Puppet Agent stores the last run report, by default, in yaml format.
    # The format of the report can be changed by setting the `cache` key of the `report` terminus
    # in the [routes.yaml](https://puppet.com/docs/puppet/latest/config_file_routes.html) file.
    # To avoid mismatches between content and file extension, this setting needs to be
    # manually updated to reflect the terminus changes.
    # The default value is '$statedir/last_run_report.yaml'.
    lastrunreport = /opt/puppetlabs/puppet/cache/state/last_run_report.yaml

    # Whether to create .dot graph files, which let you visualize the
    # dependency and containment relationships in Puppet's catalog. You
    # can load and view these files with tools like
    # [OmniGraffle](http://www.omnigroup.com/applications/omnigraffle/) (OS X)
    # or [graphviz](http://www.graphviz.org/) (multi-platform).
    # 
    # Graph files are created when _applying_ a catalog, so this setting
    # should be used on nodes running `puppet agent` or `puppet apply`.
    # 
    # The `graphdir` setting determines where Puppet will save graphs. Note
    # that we don't save graphs for historical runs; Puppet will replace the
    # previous .dot files with new ones every time it applies a catalog.
    # 
    # See your graphing software's documentation for details on opening .dot
    # files. If you're using GraphViz's `dot` command, you can do a quick PNG
    # render with `dot -Tpng <DOT FILE> -o <OUTPUT FILE>`.
    # graph = false

    # Where to save .dot-format graphs (when the `graph` setting is enabled).
    # The default value is '$statedir/graphs'.
    graphdir = /opt/puppetlabs/puppet/cache/state/graphs

    # How frequently puppet agent should ask for a signed certificate.
    # 
    # When starting for the first time, puppet agent will submit a certificate
    # signing request (CSR) to the server named in the `ca_server` setting
    # (usually the primary Puppet server); this may be autosigned, or may need to be
    # approved by a human, depending on the CA server's configuration.
    # 
    # Puppet agent cannot apply configurations until its approved certificate is
    # available. Since the certificate may or may not be available immediately,
    # puppet agent will repeatedly try to fetch it at this interval. You can
    # turn off waiting for certificates by specifying a time of 0, or a maximum
    # amount of time to wait in the `maxwaitforcert` setting, in which case
    # puppet agent will exit if it cannot get a cert.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    waitforcert = 120

    # The maximum amount of time the Puppet agent should wait for its
    # certificate request to be signed. A value of `unlimited` will cause puppet agent
    # to ask for a signed certificate indefinitely.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is 'unlimited'.
    # maxwaitforcert = unlimited

    # How frequently puppet agent should try running when there is an
    # already ongoing puppet agent instance.
    # 
    # This argument is by default disabled (value set to 0). In this case puppet agent will
    # immediately exit if it cannot run at that moment. When a value other than 0 is set, this
    # can also be used in combination with the `maxwaitforlock` argument.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '0'.
    waitforlock = 0

    # The maximum amount of time the puppet agent should wait for an
    # already running puppet agent to finish before starting a new one. This is set by default to 1 minute.
    # A value of `unlimited` will cause puppet agent to wait indefinitely.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '1m'.
    maxwaitforlock = 60

    # Tags to use to find resources.  If this is set, then
    # only resources tagged with the specified tags will be applied.
    # Values must be comma-separated.
    # The default value is ''.
    # tags = 

    # Tags to use to filter resources.  If this is set, then
    # only resources not tagged with the specified tags will be applied.
    # Values must be comma-separated.
    # The default value is ''.
    # skip_tags = 

    # Whether each resource should log when it is
    # being evaluated.  This allows you to interactively see exactly
    # what is being done.
    # evaltrace = false

    # Whether to print a transaction summary.
    # summarize = false

    # Whether SSL should be used when searching for nodes.
    # Defaults to false because SSL usually requires certificates
    # to be set up on the client side.
    # ldapssl = false

    # Whether TLS should be used when searching for nodes.
    # Defaults to false because TLS usually requires certificates
    # to be set up on the client side.
    # ldaptls = false

    # The LDAP server.
    # The default value is 'ldap'.
    # ldapserver = ldap

    # The LDAP port.
    # The default value is '389'.
    # ldapport = 389

    # The search string used to find an LDAP node.
    # The default value is '(&(objectclass=puppetClient)(cn=%s))'.
    # ldapstring = (&(objectclass=puppetClient)(cn=%s))

    # The LDAP attributes to use to define Puppet classes.  Values
    # should be comma-separated.
    # The default value is 'puppetclass'.
    # ldapclassattrs = puppetclass

    # The LDAP attributes that should be stacked to arrays by adding
    # the values in all hierarchy elements of the tree.  Values
    # should be comma-separated.
    # The default value is 'puppetvar'.
    # ldapstackedattrs = puppetvar

    # The LDAP attributes to include when querying LDAP for nodes.  All
    # returned attributes are set as variables in the top-level scope.
    # Multiple values should be comma-separated.  The value 'all' returns
    # all attributes.
    # The default value is 'all'.
    # ldapattrs = all

    # The attribute to use to define the parent node.
    # The default value is 'parentnode'.
    # ldapparentattr = parentnode

    # The user to use to connect to LDAP.  Must be specified as a
    # full DN.
    # The default value is ''.
    # ldapuser = 

    # The password to use to connect to LDAP.
    # The default value is ''.
    # ldappassword = 

    # The search base for LDAP searches.  It's impossible to provide
    # a meaningful default here, although the LDAP libraries might
    # have one already set.  Generally, it should be the 'ou=Hosts'
    # branch under your main directory.
    # The default value is ''.
    # ldapbase = 

    # Sets the max number of logged/displayed parser validation errors in case
    # multiple errors have been detected. A value of 0 is the same as a value of 1; a
    # minimum of one error is always raised.  The count is per manifest.
    # The default value is '10'.
    # max_errors = 10

    # Sets the max number of logged/displayed parser validation warnings in
    # case multiple warnings have been detected. A value of 0 blocks logging of
    # warnings.  The count is per manifest.
    # The default value is '10'.
    # max_warnings = 10

    # Sets the max number of logged/displayed parser validation deprecation
    # warnings in case multiple deprecation warnings have been detected. A value of 0
    # blocks the logging of deprecation warnings.  The count is per manifest.
    # The default value is '10'.
    # max_deprecations = 10

    # Causes an evaluation error when referencing unknown variables. (This does not affect
    # referencing variables that are explicitly set to undef).
    # strict_variables = false

    # Turns on experimental support for tasks and plans in the puppet language. This is for internal API use only.
    # Do not change this setting.
    # tasks = false

    # Whether to document all resources when using `puppet doc` to
    # generate manifest documentation.
    # document_all = false

